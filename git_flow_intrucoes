-- aplicar gitflow

-- configurar protecao de branchs

-- trabalhar com pull requests

-- code review ?!

-- SemVer - padronizar o versionamento do projeto

--CMDER WINDOWS TERMINAL
https://programmer.help/blogs/just-like-using-cmder-use-windows-terminal.html
https://zimmergren.net/using-third-party-terminals-within-windows-terminal/
	
	{
        "commandline": "cmd.exe /k \"C:/MyPrograms/DevTools/CMDs/Cmder/vendor/init.bat\"",
        "guid": "{b272da29-fe93-41b3-8194-fe87213db4a9}",
        "icon": "C:\\MyPrograms\\DevTools\\CMDs\\Cmder\\icons\\cmder.ico",
        "name": "Cmder",
        "startingDirectory" : "%USERPROFILE%"
    }

--GPG KEY
-- listando as chaves
	gpg --list-secret-key --keyid-form LONG

-- gerando uma chave
	gpg --full-generate-key	

-- exportando a chave criada
	gpg --armor --export D59E2F4522F9A5BF/ID_CHAVE | clip/pbcopy-copia_a_chave

-- configurando a chave criada com o usuario
	 git config user.signingkey D59E2F4522F9A5BF/ID_CHAVE	

-- assinando os commit
	git config commit.gpgsign true	 
	git config tag.gpgSign true

-- adicionando um segunda conta a chave gpg
	gpg --edit-key D59E2F4522F9A5BF
	-- adicionando a segunda conta
		adduid
	-- selecionando a conta
		uid 2
	-- tornando a conta confiavel
		trust
	-- salvando as alteracoes
		save
		
-- como selecionar uma conta da chave gpg		

--SSH KEY
https://stackoverflow.com/questions/16638092/copying-a-rsa-public-key-to-clipboard

-- gerando um chave ssh
	ssh-keygen

-- copiando a chave gerada
	cat ~/.ssh/id_rsa.pub

--GIT
-- mudar para https ou ssh
	git remote set-url origin git@bitbucket.org:tutorials/tutorials.git	

-- ver apontamentos do repositorio
	git remote -v	

-- ver diferenca do arquivo
	git diff
-- ver a diferenca entre commit
	git diff sha1 sha2


--GIT FLOW
- LINKS
- https://stackoverflow.com/questions/13887454/git-flow-releasing-selected-features

- CONCEITOS
-- quando finalizando uma feature com apenas um commit, o git flow apenas realiza o fast forward na develop
	nao criando o commit de merge
-- mas quando a feature possui mais de um commit, o git flow realiza fast forward e no final cria o comando de merge da feature

--- podemos manter este comportamento, pois se precisarmos reverte uma feature com apenas um commit, como a feature tem apenas um commit
--- precisamos apenas reverter o commit em questao
--- se a feature possui varios commits, como o git flow criou o commit de merge, soh precisamos reverter o commit de merge

--- se uma feature nao deve subir para producao, entao ela nao deve ir para a develop
--- e se uma feature for impedida de subir para producao no ultimo momento, quando ja estiver dentro da release?
--- se formos jogar a develop na feature, pode ser que tenha alguma feature que nao deva sabir agora na release
--- mas todas as features na develop, nao quer dizer que ela ja eh candidata a subir na proxima release?

=======

-- removendo todos os arquivos do staged
	git restore --staged .

-- inicializando uma feature
	git flow feature start nome_feature

-- finalizando uma feature
	git flow feature finish nome_feature
